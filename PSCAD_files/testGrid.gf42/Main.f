!=======================================================================
! Generated by  : PSCAD v4.6.2.0
!
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_1(3)

! Control Signals
      INTEGER  IT_1
      REAL     I0(3), U0(3), U1(3), I1(3), U2(3)
      REAL     I2(3), U3(3), I3(3), U4(3), I4(3)
      REAL     U5(3), I5(3), RT_1, I1A, I1B, I1C
      REAL     U1A, U1B, U1C, RT_2, RT_3, RT_4
      REAL     I3A, I3B, I3C, U3A, U3B, U3C, I0A
      REAL     I0B, I0C, U0C, U0B, U0A, U2A, U2B
      REAL     U2C, I2C, I2B, I2A, U4A, U4B, U4C
      REAL     I4C, I4B, I4A, U5A, U5B, U5C, I5C
      REAL     I5B, I5A, I6(3), U6(3)

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6, RVD1_7

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ISUBS, SS(5), IBRCH(5), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 1
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 82
      NPGB      = NPGB + 36
      INODE     = NNODE + 2
      NNODE     = NNODE + 41
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 5

      DO IT_0 = 1,5
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 9

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 30

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 9

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 6

      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 0
!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      IT_1     = STOI(ISTOI + 1)
      RT_1     = STOF(ISTOF + 37)
      I1A      = STOF(ISTOF + 38)
      I1B      = STOF(ISTOF + 39)
      I1C      = STOF(ISTOF + 40)
      U1A      = STOF(ISTOF + 41)
      U1B      = STOF(ISTOF + 42)
      U1C      = STOF(ISTOF + 43)
      RT_2     = STOF(ISTOF + 44)
      RT_3     = STOF(ISTOF + 45)
      RT_4     = STOF(ISTOF + 46)
      I3A      = STOF(ISTOF + 47)
      I3B      = STOF(ISTOF + 48)
      I3C      = STOF(ISTOF + 49)
      U3A      = STOF(ISTOF + 50)
      U3B      = STOF(ISTOF + 51)
      U3C      = STOF(ISTOF + 52)
      I0A      = STOF(ISTOF + 53)
      I0B      = STOF(ISTOF + 54)
      I0C      = STOF(ISTOF + 55)
      U0C      = STOF(ISTOF + 56)
      U0B      = STOF(ISTOF + 57)
      U0A      = STOF(ISTOF + 58)
      U2A      = STOF(ISTOF + 59)
      U2B      = STOF(ISTOF + 60)
      U2C      = STOF(ISTOF + 61)
      I2C      = STOF(ISTOF + 62)
      I2B      = STOF(ISTOF + 63)
      I2A      = STOF(ISTOF + 64)
      U4A      = STOF(ISTOF + 65)
      U4B      = STOF(ISTOF + 66)
      U4C      = STOF(ISTOF + 67)
      I4C      = STOF(ISTOF + 68)
      I4B      = STOF(ISTOF + 69)
      I4A      = STOF(ISTOF + 70)
      U5A      = STOF(ISTOF + 71)
      U5B      = STOF(ISTOF + 72)
      U5C      = STOF(ISTOF + 73)
      I5C      = STOF(ISTOF + 74)
      I5B      = STOF(ISTOF + 75)
      I5A      = STOF(ISTOF + 76)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         I0(IT_0) = STOF(ISTOF + 0 + IT_0)
         U0(IT_0) = STOF(ISTOF + 3 + IT_0)
         U1(IT_0) = STOF(ISTOF + 6 + IT_0)
         I1(IT_0) = STOF(ISTOF + 9 + IT_0)
         U2(IT_0) = STOF(ISTOF + 12 + IT_0)
         I2(IT_0) = STOF(ISTOF + 15 + IT_0)
         U3(IT_0) = STOF(ISTOF + 18 + IT_0)
         I3(IT_0) = STOF(ISTOF + 21 + IT_0)
         U4(IT_0) = STOF(ISTOF + 24 + IT_0)
         I4(IT_0) = STOF(ISTOF + 27 + IT_0)
         U5(IT_0) = STOF(ISTOF + 30 + IT_0)
         I5(IT_0) = STOF(ISTOF + 33 + IT_0)
         I6(IT_0) = STOF(ISTOF + 76 + IT_0)
         U6(IT_0) = STOF(ISTOF + 79 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_1(IT_0) = NODE(INODE + 18 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 60:[tfaultn] Timed Fault Logic 
! Timed fault logic
      IT_1 = 0
      IF ( TIME .GE. 1.0 ) IT_1 = 1
      IF ( TIME .GE. (1.0+0.5) ) IT_1 = 0

! 90:[const] Real Constant 

      RT_2 = 0.2

! 100:[const] Real Constant 

      RT_1 = 2.0

! 110:[const] Real Constant 

      RT_4 = 0.2

! 120:[const] Real Constant 

      RT_3 = 2.0

! 250:[recorder2_0] RTP and COMTRADE recorder 
!
      CALL COMPONENT_ID(ICALL_NO,1831375947)
      IF (FIRSTSTEP) THEN
           call SaveAn ("ABC_W2", 'IA ','IB ','IC ','UA ', 'UB ','UC ','&
     &A7 ','A8 ', 'A9 ','A10 ','A11 ','A12 ', 'A1 ','A2 ','A3 ','A4 ', '&
     &A5 ','A6 ','A7 ','A8 ', 'A9 ','A10 ','A11 ','A12 ', 'A1 ','A2 ','A&
     &3 ','A4 ', 'A5 ','A6 ','A7 ','A8 ', 'A9 ','A10 ','A11 ','A12 ', 'A&
     &1 ','A2 ','A3 ','A4 ', 'A5 ','A6 ','A7 ','A8 ', 'A9 ','A10 ','A11 &
     &','A12 ')
!
           call SaveDig ('D1 ','D2 ','D3 ','D4 ', 'D5 ','D6 ','D7 ','D8 &
     &', 'D9 ','D10 ','D11 ','D12 ', 'D13 ','D14 ','D15 ','D16 ', 'D1 ',&
     &'D2 ','D3 ','D4 ', 'D5 ','D6 ','D7 ','D8 ', 'D9 ','D10 ','D11 ','D&
     &12 ', 'D13 ','D14 ','D15 ','D16 ', 'Extra_Line_1 ','Extra_Line_2 '&
     &,'Extra_Line_3 ','Extra_Line_4 ','Extra_Line_5 ')
      ENDIF
!
      call rtps_main ( "ABC_W2", 2,6,0,250,0,'EMTDC_Simulation ',2,RT_4,&
     &RT_3, I3A, I3B, I3C, U3A, U3B, U3C, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, &
     &0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 0.0, 0.0, 0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,0,0,0,0,0,0,0,0,0, 0,&
     &0,0,0,0,0,0,0,0,0,0,0, 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0&
     &,1.0, 0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,4096,20,0, 0,0,0,0)
!

! 260:[recorder2_0] RTP and COMTRADE recorder 
!
      CALL COMPONENT_ID(ICALL_NO,2029606129)
      IF (FIRSTSTEP) THEN
           call SaveAn ("ABC_W1", 'IA ','IB ','IC ','UA ', 'UB ','UC ','&
     &A7 ','A8 ', 'A9 ','A10 ','A11 ','A12 ', 'A1 ','A2 ','A3 ','A4 ', '&
     &A5 ','A6 ','A7 ','A8 ', 'A9 ','A10 ','A11 ','A12 ', 'A1 ','A2 ','A&
     &3 ','A4 ', 'A5 ','A6 ','A7 ','A8 ', 'A9 ','A10 ','A11 ','A12 ', 'A&
     &1 ','A2 ','A3 ','A4 ', 'A5 ','A6 ','A7 ','A8 ', 'A9 ','A10 ','A11 &
     &','A12 ')
!
           call SaveDig ('D1 ','D2 ','D3 ','D4 ', 'D5 ','D6 ','D7 ','D8 &
     &', 'D9 ','D10 ','D11 ','D12 ', 'D13 ','D14 ','D15 ','D16 ', 'D1 ',&
     &'D2 ','D3 ','D4 ', 'D5 ','D6 ','D7 ','D8 ', 'D9 ','D10 ','D11 ','D&
     &12 ', 'D13 ','D14 ','D15 ','D16 ', 'Extra_Line_1 ','Extra_Line_2 '&
     &,'Extra_Line_3 ','Extra_Line_4 ','Extra_Line_5 ')
      ENDIF
!
      call rtps_main ( "ABC_W1", 2,6,0,250,0,'EMTDC_Simulation ',1,RT_2,&
     &RT_1, I1A, I1B, I1C, U1A, U1B, U1C, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, &
     &0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 0.0, 0.0, 0,0,0,0,0,0,0,0,0,0,0,0, 1,1,1,0,0,0,0,0,0,0,0,0, 0,&
     &0,0,0,0,0,0,0,0,0,0,0, 1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0&
     &,1.0, 0,0,0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,4096,20,0, 0,0,0,0)
!

! 270:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_EXE(SS(4), (IBRCH(4)+1), (IBRCH(4)+2), (IBRCH(4)+3),&
     & (IBRCH(4)+4), (IBRCH(4)+5), (IBRCH(4)+6),0,IT_1,11,0.01)
      LVD1_1 = (OPENBR( (IBRCH(4)+1),SS(4)).AND.OPENBR( (IBRCH(4)+2),SS(&
     &4)).AND.OPENBR( (IBRCH(4)+3),SS(4)).AND.OPENBR( (IBRCH(4)+4),SS(4)&
     &).AND.OPENBR( (IBRCH(4)+5),SS(4)).AND.OPENBR( (IBRCH(4)+6),SS(4)))
      IVD1_1 = E_BtoI(LVD1_1)
      IF(FIRSTSTEP .OR. (IVD1_1 .NE. STORI(NSTORI))) THEN
         CALL PSCAD_AGI2(ICALL_NO,1401030494,1-IVD1_1,"AG1")
         STORI(NSTORI) = IVD1_1
      ENDIF
      NSTORI = NSTORI + 1

! 1:[source3] Three Phase Voltage Source Model 1 'Source1'
!  3-Phase source: Source1
      RVD1_1 = RTCF(NRTCF+12)
      RVD1_2 = RTCF(NRTCF+14)
      RVD1_3 = RTCF(NRTCF+13)
      CALL ESYS651_EXE(SS(3), (IBRCH(3)+7), (IBRCH(3)+8), (IBRCH(3)+9),0&
     &,0,0, SS(3), NT_1(1),NT_1(2),NT_1(3), 0, RVD1_2, RVD1_1, 0.05, 1.0&
     &, 1.0, 1.0,RVD1_3, 1.0, 0.02, 0.05, 1.0, 0.02, 0.05, RVD1_4, RVD1_&
     &5, RVD1_6, RVD1_7)

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (IBRCH(1)+6), &
     &(IBRCH(1)+7), (IBRCH(1)+8), (IBRCH(1)+9))

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT2_EXE((IXFMR + 1),(IXFMR + 2),(IXFMR + 3), (IBRCH(2)+22),&
     & (IBRCH(2)+23), (IBRCH(2)+24), (IBRCH(2)+25), (IBRCH(2)+26), (IBRC&
     &H(2)+27),0,0,0,0,0,0,SS(2),0,1.0,0)

! 1:[fixed_load] Fixed Load 
      CALL LOAD3P1_EXE(SS(2), (IBRCH(2)+10), (IBRCH(2)+11), (IBRCH(2)+12&
     &), (IBRCH(2)+13), (IBRCH(2)+14), (IBRCH(2)+15))

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOI(ISTOI + 1) = IT_1
      STOF(ISTOF + 37) = RT_1
      STOF(ISTOF + 38) = I1A
      STOF(ISTOF + 39) = I1B
      STOF(ISTOF + 40) = I1C
      STOF(ISTOF + 41) = U1A
      STOF(ISTOF + 42) = U1B
      STOF(ISTOF + 43) = U1C
      STOF(ISTOF + 44) = RT_2
      STOF(ISTOF + 45) = RT_3
      STOF(ISTOF + 46) = RT_4
      STOF(ISTOF + 47) = I3A
      STOF(ISTOF + 48) = I3B
      STOF(ISTOF + 49) = I3C
      STOF(ISTOF + 50) = U3A
      STOF(ISTOF + 51) = U3B
      STOF(ISTOF + 52) = U3C
      STOF(ISTOF + 53) = I0A
      STOF(ISTOF + 54) = I0B
      STOF(ISTOF + 55) = I0C
      STOF(ISTOF + 56) = U0C
      STOF(ISTOF + 57) = U0B
      STOF(ISTOF + 58) = U0A
      STOF(ISTOF + 59) = U2A
      STOF(ISTOF + 60) = U2B
      STOF(ISTOF + 61) = U2C
      STOF(ISTOF + 62) = I2C
      STOF(ISTOF + 63) = I2B
      STOF(ISTOF + 64) = I2A
      STOF(ISTOF + 65) = U4A
      STOF(ISTOF + 66) = U4B
      STOF(ISTOF + 67) = U4C
      STOF(ISTOF + 68) = I4C
      STOF(ISTOF + 69) = I4B
      STOF(ISTOF + 70) = I4A
      STOF(ISTOF + 71) = U5A
      STOF(ISTOF + 72) = U5B
      STOF(ISTOF + 73) = U5C
      STOF(ISTOF + 74) = I5C
      STOF(ISTOF + 75) = I5B
      STOF(ISTOF + 76) = I5A

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 0 + IT_0) = I0(IT_0)
         STOF(ISTOF + 3 + IT_0) = U0(IT_0)
         STOF(ISTOF + 6 + IT_0) = U1(IT_0)
         STOF(ISTOF + 9 + IT_0) = I1(IT_0)
         STOF(ISTOF + 12 + IT_0) = U2(IT_0)
         STOF(ISTOF + 15 + IT_0) = I2(IT_0)
         STOF(ISTOF + 18 + IT_0) = U3(IT_0)
         STOF(ISTOF + 21 + IT_0) = I3(IT_0)
         STOF(ISTOF + 24 + IT_0) = U4(IT_0)
         STOF(ISTOF + 27 + IT_0) = I4(IT_0)
         STOF(ISTOF + 30 + IT_0) = U5(IT_0)
         STOF(ISTOF + 33 + IT_0) = I5(IT_0)
         STOF(ISTOF + 76 + IT_0) = I6(IT_0)
         STOF(ISTOF + 79 + IT_0) = U6(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------

      REAL    EMTDC_VVDC    ! 

!---------------------------------------
! Variable Declarations
!---------------------------------------


! Electrical Node Indices
      INTEGER  B(3), A(3), NT_1(3), NT_2(3)
      INTEGER  NT_5(3), NT_7(3)

! Control Signals
      REAL     I0(3), U0(3), U1(3), I1(3), U2(3)
      REAL     I2(3), U3(3), I3(3), U4(3), I4(3)
      REAL     U5(3), I5(3), RT_1, I1A, I1B, I1C
      REAL     U1A, U1B, U1C, RT_2, RT_3, RT_4
      REAL     I3A, I3B, I3C, U3A, U3B, U3C, I0A
      REAL     I0B, I0C, U0C, U0B, U0A, U2A, U2B
      REAL     U2C, I2C, I2B, I2A, U4A, U4B, U4C
      REAL     I4C, I4B, I4A, U5A, U5B, U5C, I5C
      REAL     I5B, I5A, I6(3), U6(3)

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(5), IBRCH(5), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 36
      INODE     = NNODE + 2
      NNODE     = NNODE + 41
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 5

      DO IT_0 = 1,5
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 9

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 30

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 9

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 6

      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 0
!---------------------------------------
! Transfers from storage arrays
!---------------------------------------

      RT_1     = STOF(ISTOF + 37)
      I1A      = STOF(ISTOF + 38)
      I1B      = STOF(ISTOF + 39)
      I1C      = STOF(ISTOF + 40)
      U1A      = STOF(ISTOF + 41)
      U1B      = STOF(ISTOF + 42)
      U1C      = STOF(ISTOF + 43)
      RT_2     = STOF(ISTOF + 44)
      RT_3     = STOF(ISTOF + 45)
      RT_4     = STOF(ISTOF + 46)
      I3A      = STOF(ISTOF + 47)
      I3B      = STOF(ISTOF + 48)
      I3C      = STOF(ISTOF + 49)
      U3A      = STOF(ISTOF + 50)
      U3B      = STOF(ISTOF + 51)
      U3C      = STOF(ISTOF + 52)
      I0A      = STOF(ISTOF + 53)
      I0B      = STOF(ISTOF + 54)
      I0C      = STOF(ISTOF + 55)
      U0C      = STOF(ISTOF + 56)
      U0B      = STOF(ISTOF + 57)
      U0A      = STOF(ISTOF + 58)
      U2A      = STOF(ISTOF + 59)
      U2B      = STOF(ISTOF + 60)
      U2C      = STOF(ISTOF + 61)
      I2C      = STOF(ISTOF + 62)
      I2B      = STOF(ISTOF + 63)
      I2A      = STOF(ISTOF + 64)
      U4A      = STOF(ISTOF + 65)
      U4B      = STOF(ISTOF + 66)
      U4C      = STOF(ISTOF + 67)
      I4C      = STOF(ISTOF + 68)
      I4B      = STOF(ISTOF + 69)
      I4A      = STOF(ISTOF + 70)
      U5A      = STOF(ISTOF + 71)
      U5B      = STOF(ISTOF + 72)
      U5C      = STOF(ISTOF + 73)
      I5C      = STOF(ISTOF + 74)
      I5B      = STOF(ISTOF + 75)
      I5A      = STOF(ISTOF + 76)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         I0(IT_0) = STOF(ISTOF + 0 + IT_0)
         U0(IT_0) = STOF(ISTOF + 3 + IT_0)
         U1(IT_0) = STOF(ISTOF + 6 + IT_0)
         I1(IT_0) = STOF(ISTOF + 9 + IT_0)
         U2(IT_0) = STOF(ISTOF + 12 + IT_0)
         I2(IT_0) = STOF(ISTOF + 15 + IT_0)
         U3(IT_0) = STOF(ISTOF + 18 + IT_0)
         I3(IT_0) = STOF(ISTOF + 21 + IT_0)
         U4(IT_0) = STOF(ISTOF + 24 + IT_0)
         I4(IT_0) = STOF(ISTOF + 27 + IT_0)
         U5(IT_0) = STOF(ISTOF + 30 + IT_0)
         I5(IT_0) = STOF(ISTOF + 33 + IT_0)
         I6(IT_0) = STOF(ISTOF + 76 + IT_0)
         U6(IT_0) = STOF(ISTOF + 79 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         B(IT_0) = NODE(INODE + 3 + IT_0)
         A(IT_0) = NODE(INODE + 6 + IT_0)
         NT_1(IT_0) = NODE(INODE + 18 + IT_0)
         NT_2(IT_0) = NODE(INODE + 21 + IT_0)
         NT_5(IT_0) = NODE(INODE + 30 + IT_0)
         NT_7(IT_0) = NODE(INODE + 36 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I0(1) = ( CBR((IBRCH(3)+1), SS(3)))
      I0(2) = ( CBR((IBRCH(3)+2), SS(3)))
      I0(3) = ( CBR((IBRCH(3)+3), SS(3)))
      U0(1) = EMTDC_VVDC(SS(3), NT_1(1), 0)
      U0(2) = EMTDC_VVDC(SS(3), NT_1(2), 0)
      U0(3) = EMTDC_VVDC(SS(3), NT_1(3), 0)

! 20:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I1(1) = ( CBR((IBRCH(3)+4), SS(3)))
      I1(2) = ( CBR((IBRCH(3)+5), SS(3)))
      I1(3) = ( CBR((IBRCH(3)+6), SS(3)))
      U1(1) = EMTDC_VVDC(SS(3), A(1), 0)
      U1(2) = EMTDC_VVDC(SS(3), A(2), 0)
      U1(3) = EMTDC_VVDC(SS(3), A(3), 0)

! 30:[multimeter] Multimeter '2'
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I2(1) = ( CBR((IBRCH(2)+28), SS(2)))
      I2(2) = ( CBR((IBRCH(2)+29), SS(2)))
      I2(3) = ( CBR((IBRCH(2)+30), SS(2)))
      U2(1) = EMTDC_VVDC(SS(2), NT_7(1), 0)
      U2(2) = EMTDC_VVDC(SS(2), NT_7(2), 0)
      U2(3) = EMTDC_VVDC(SS(2), NT_7(3), 0)

! 40:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I3(1) = ( CBR((IBRCH(2)+7), SS(2)))
      I3(2) = ( CBR((IBRCH(2)+8), SS(2)))
      I3(3) = ( CBR((IBRCH(2)+9), SS(2)))
      U3(1) = EMTDC_VVDC(SS(2), B(1), 0)
      U3(2) = EMTDC_VVDC(SS(2), B(2), 0)
      U3(3) = EMTDC_VVDC(SS(2), B(3), 0)

! 50:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I4(1) = ( CBR((IBRCH(1)+1), SS(1)))
      I4(2) = ( CBR((IBRCH(1)+2), SS(1)))
      I4(3) = ( CBR((IBRCH(1)+3), SS(1)))
      U4(1) = EMTDC_VVDC(SS(1), NT_5(1), 0)
      U4(2) = EMTDC_VVDC(SS(1), NT_5(2), 0)
      U4(3) = EMTDC_VVDC(SS(1), NT_5(3), 0)

! 70:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I5(1) = ( CBR((IBRCH(2)+4), SS(2)))
      I5(2) = ( CBR((IBRCH(2)+5), SS(2)))
      I5(3) = ( CBR((IBRCH(2)+6), SS(2)))
      U5(1) = EMTDC_VVDC(SS(2), B(1), 0)
      U5(2) = EMTDC_VVDC(SS(2), B(2), 0)
      U5(3) = EMTDC_VVDC(SS(2), B(3), 0)

! 80:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      I6(1) = ( CBR((IBRCH(2)+1), SS(2)))
      I6(2) = ( CBR((IBRCH(2)+2), SS(2)))
      I6(3) = ( CBR((IBRCH(2)+3), SS(2)))
      U6(1) = EMTDC_VVDC(SS(2), NT_2(1), 0)
      U6(2) = EMTDC_VVDC(SS(2), NT_2(2), 0)
      U6(3) = EMTDC_VVDC(SS(2), NT_2(3), 0)

! 90:[const] Real Constant 

      RT_2 = 0.2

! 100:[const] Real Constant 

      RT_1 = 2.0

! 110:[const] Real Constant 

      RT_4 = 0.2

! 120:[const] Real Constant 

      RT_3 = 2.0

! 130:[datatap] Scalar/Array Tap 
      I1A = I1(1)

! 140:[datatap] Scalar/Array Tap 
      U1A = U1(1)

! 150:[datatap] Scalar/Array Tap 
      I3A = I3(1)

! 160:[datatap] Scalar/Array Tap 
      U3A = U3(1)

! 170:[datatap] Scalar/Array Tap 
      I1B = I1(2)

! 180:[datatap] Scalar/Array Tap 
      U1B = U1(2)

! 190:[datatap] Scalar/Array Tap 
      I3B = I3(2)

! 200:[datatap] Scalar/Array Tap 
      U3B = U3(2)

! 210:[datatap] Scalar/Array Tap 
      I1C = I1(3)

! 220:[datatap] Scalar/Array Tap 
      U1C = U1(3)

! 230:[datatap] Scalar/Array Tap 
      I3C = I3(3)

! 240:[datatap] Scalar/Array Tap 
      U3C = U3(3)

! 270:[tpflt] Three Phase Fault 
!
! Multi-phase Fault Currents
!
!

! 280:[datatap] Scalar/Array Tap 
      U5C = U5(3)

! 290:[datatap] Scalar/Array Tap 
      I5C = I5(3)

! 300:[datatap] Scalar/Array Tap 
      U4C = U4(3)

! 310:[datatap] Scalar/Array Tap 
      I4C = I4(3)

! 320:[datatap] Scalar/Array Tap 
      U2C = U2(3)

! 330:[datatap] Scalar/Array Tap 
      U5B = U5(2)

! 340:[datatap] Scalar/Array Tap 
      I2C = I2(3)

! 350:[datatap] Scalar/Array Tap 
      I5B = I5(2)

! 360:[datatap] Scalar/Array Tap 
      U4B = U4(2)

! 370:[datatap] Scalar/Array Tap 
      I4B = I4(2)

! 380:[datatap] Scalar/Array Tap 
      U0C = U0(3)

! 390:[datatap] Scalar/Array Tap 
      I0C = I0(3)

! 400:[datatap] Scalar/Array Tap 
      U2B = U2(2)

! 410:[datatap] Scalar/Array Tap 
      U5A = U5(1)

! 420:[datatap] Scalar/Array Tap 
      I2B = I2(2)

! 430:[datatap] Scalar/Array Tap 
      I5A = I5(1)

! 440:[datatap] Scalar/Array Tap 
      U4A = U4(1)

! 450:[datatap] Scalar/Array Tap 
      I4A = I4(1)

! 460:[datatap] Scalar/Array Tap 
      U0B = U0(2)

! 470:[datatap] Scalar/Array Tap 
      I0B = I0(2)

! 480:[datatap] Scalar/Array Tap 
      U2A = U2(1)

! 490:[datatap] Scalar/Array Tap 
      I2A = I2(1)

! 500:[pgb] Output Channel 'U5'

      DO IVD1_1 = 1, 3
         PGB(IPGB+1+IVD1_1-1) = U5(IVD1_1)
      ENDDO

! 510:[datatap] Scalar/Array Tap 
      U0A = U0(1)

! 520:[datatap] Scalar/Array Tap 
      I0A = I0(1)

! 530:[pgb] Output Channel 'U4'

      DO IVD1_1 = 1, 3
         PGB(IPGB+4+IVD1_1-1) = U4(IVD1_1)
      ENDDO

! 540:[pgb] Output Channel 'U3'

      DO IVD1_1 = 1, 3
         PGB(IPGB+7+IVD1_1-1) = U3(IVD1_1)
      ENDDO

! 550:[pgb] Output Channel 'U2'

      DO IVD1_1 = 1, 3
         PGB(IPGB+10+IVD1_1-1) = U2(IVD1_1)
      ENDDO

! 560:[pgb] Output Channel 'U1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+13+IVD1_1-1) = U1(IVD1_1)
      ENDDO

! 570:[pgb] Output Channel 'U0'

      DO IVD1_1 = 1, 3
         PGB(IPGB+16+IVD1_1-1) = U0(IVD1_1)
      ENDDO

! 580:[pgb] Output Channel 'I5'

      DO IVD1_1 = 1, 3
         PGB(IPGB+19+IVD1_1-1) = I5(IVD1_1)
      ENDDO

! 590:[pgb] Output Channel 'I4'

      DO IVD1_1 = 1, 3
         PGB(IPGB+22+IVD1_1-1) = I4(IVD1_1)
      ENDDO

! 600:[pgb] Output Channel 'I3'

      DO IVD1_1 = 1, 3
         PGB(IPGB+25+IVD1_1-1) = I3(IVD1_1)
      ENDDO

! 610:[pgb] Output Channel 'I2'

      DO IVD1_1 = 1, 3
         PGB(IPGB+28+IVD1_1-1) = I2(IVD1_1)
      ENDDO

! 620:[pgb] Output Channel 'I1'

      DO IVD1_1 = 1, 3
         PGB(IPGB+31+IVD1_1-1) = I1(IVD1_1)
      ENDDO

! 630:[pgb] Output Channel 'I0'

      DO IVD1_1 = 1, 3
         PGB(IPGB+34+IVD1_1-1) = I0(IVD1_1)
      ENDDO

!---------------------------------------
! Feedbacks and transfers to storage
!---------------------------------------

      STOF(ISTOF + 37) = RT_1
      STOF(ISTOF + 38) = I1A
      STOF(ISTOF + 39) = I1B
      STOF(ISTOF + 40) = I1C
      STOF(ISTOF + 41) = U1A
      STOF(ISTOF + 42) = U1B
      STOF(ISTOF + 43) = U1C
      STOF(ISTOF + 44) = RT_2
      STOF(ISTOF + 45) = RT_3
      STOF(ISTOF + 46) = RT_4
      STOF(ISTOF + 47) = I3A
      STOF(ISTOF + 48) = I3B
      STOF(ISTOF + 49) = I3C
      STOF(ISTOF + 50) = U3A
      STOF(ISTOF + 51) = U3B
      STOF(ISTOF + 52) = U3C
      STOF(ISTOF + 53) = I0A
      STOF(ISTOF + 54) = I0B
      STOF(ISTOF + 55) = I0C
      STOF(ISTOF + 56) = U0C
      STOF(ISTOF + 57) = U0B
      STOF(ISTOF + 58) = U0A
      STOF(ISTOF + 59) = U2A
      STOF(ISTOF + 60) = U2B
      STOF(ISTOF + 61) = U2C
      STOF(ISTOF + 62) = I2C
      STOF(ISTOF + 63) = I2B
      STOF(ISTOF + 64) = I2A
      STOF(ISTOF + 65) = U4A
      STOF(ISTOF + 66) = U4B
      STOF(ISTOF + 67) = U4C
      STOF(ISTOF + 68) = I4C
      STOF(ISTOF + 69) = I4B
      STOF(ISTOF + 70) = I4A
      STOF(ISTOF + 71) = U5A
      STOF(ISTOF + 72) = U5B
      STOF(ISTOF + 73) = U5C
      STOF(ISTOF + 74) = I5C
      STOF(ISTOF + 75) = I5B
      STOF(ISTOF + 76) = I5A

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 0 + IT_0) = I0(IT_0)
         STOF(ISTOF + 3 + IT_0) = U0(IT_0)
         STOF(ISTOF + 6 + IT_0) = U1(IT_0)
         STOF(ISTOF + 9 + IT_0) = I1(IT_0)
         STOF(ISTOF + 12 + IT_0) = U2(IT_0)
         STOF(ISTOF + 15 + IT_0) = I2(IT_0)
         STOF(ISTOF + 18 + IT_0) = U3(IT_0)
         STOF(ISTOF + 21 + IT_0) = I3(IT_0)
         STOF(ISTOF + 24 + IT_0) = U4(IT_0)
         STOF(ISTOF + 27 + IT_0) = I4(IT_0)
         STOF(ISTOF + 30 + IT_0) = U5(IT_0)
         STOF(ISTOF + 33 + IT_0) = I5(IT_0)
         STOF(ISTOF + 76 + IT_0) = I6(IT_0)
         STOF(ISTOF + 79 + IT_0) = U6(IT_0)
      END DO


!---------------------------------------
! Close Model Data read
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  NT_1(3)

! Control Signals
      REAL     RT_1, RT_2, RT_3, RT_4

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(5), IBRCH(5), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 41
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 5

      DO IT_0 = 1,5
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 9

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 30

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 9

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 6

      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 0
!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_1(IT_0) = NODE(INODE + 18 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 90:[const] Real Constant 
      RT_2 = 0.2

! 100:[const] Real Constant 
      RT_1 = 2.0

! 110:[const] Real Constant 
      RT_4 = 0.2

! 120:[const] Real Constant 
      RT_3 = 2.0

! 250:[recorder2_0] RTP and COMTRADE recorder 

! 260:[recorder2_0] RTP and COMTRADE recorder 

! 270:[tpflt] Three Phase Fault 
      CALL E3PHFLT1_CFG(1000000.0,0.0)

! 1:[source3] Three Phase Voltage Source Model 1 'Source1'
      CALL COMPONENT_ID(ICALL_NO,453911882)
      RVD1_1 = 1.0
      RVD1_2 = 0.1
      CALL ESYS651_CFG(3,3,1,0,0,SS(3), (IBRCH(3)+7), (IBRCH(3)+8), (IBR&
     &CH(3)+9),0,0,0, 50.0,50.0,0.0,220.0,0.0,0.0,100.0,220.0,230.0, 10.&
     &0,88.0,2.0,1.0,286.537,0.032, 1.0,80.0,RVD1_1,RVD1_2)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(220.0,50.0,20.0,10.0,2.0,2.0,0.0,0.0)

! 1:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T'
      CALL COMPONENT_ID(ICALL_NO,1352536945)
      RVD1_1 = ONE_3RD*125.0
      RVD1_2 = 220.0*SQRT_1BY3
      RVD1_3 = 10.5
      CALL E_TF2W_CFG((IXFMR + 1),1,RVD1_1,50.0,0.11,0.00304,RVD1_2,RVD1&
     &_3,0.4)
      CALL E_TF2W_CFG((IXFMR + 2),1,RVD1_1,50.0,0.11,0.00304,RVD1_2,RVD1&
     &_3,0.4)
      CALL E_TF2W_CFG((IXFMR + 3),1,RVD1_1,50.0,0.11,0.00304,RVD1_2,RVD1&
     &_3,0.4)
      IF (0.00096 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.00096
        RVD1_4 = 6.0/(125.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(2)+16),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+17),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+18),SS(2),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+19),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+20),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(2)+21),SS(2),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT2_CFG(2, (IBRCH(2)+22), (IBRCH(2)+23), (IBRCH(2)+24), (IB&
     &RCH(2)+25), (IBRCH(2)+26), (IBRCH(2)+27),0,0,0,0,0,0,SS(2),RVD1_1,&
     &0.2,1.17,50.0,0.0,0.4,0.0,0.11,0.0,0.0,0.0,0.0,0.0,RVD1_2,RVD1_3,0&
     &.0,0.0)

! 1:[fixed_load] Fixed Load 
      CALL LOAD1P1_CFG(10.0,50.0,40.0,20.0,2.0,2.0,0.0,0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations
!---------------------------------------


!---------------------------------------
! Variable Declarations
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  B(3), A(3), NT_1(3), NT_2(3)
      INTEGER  NT_5(3), NT_7(3)

! Control Signals
      REAL     RT_1, RT_2, RT_3, RT_4

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(5), IBRCH(5), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 41
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 3
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 5

      DO IT_0 = 1,5
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 9

      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 30

      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 9

      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 6

      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 0
!---------------------------------------
! Electrical Node Lookup
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         B(IT_0) = NODE(INODE + 3 + IT_0)
         A(IT_0) = NODE(INODE + 6 + IT_0)
         NT_1(IT_0) = NODE(INODE + 18 + IT_0)
         NT_2(IT_0) = NODE(INODE + 21 + IT_0)
         NT_5(IT_0) = NODE(INODE + 30 + IT_0)
         NT_7(IT_0) = NODE(INODE + 36 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition
!---------------------------------------


! 10:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 20:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 30:[multimeter] Multimeter '2'
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 40:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 50:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 70:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 80:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5

! 90:[const] Real Constant 
      RT_2 = 0.2

! 100:[const] Real Constant 
      RT_1 = 2.0

! 110:[const] Real Constant 
      RT_4 = 0.2

! 120:[const] Real Constant 
      RT_3 = 2.0

! 130:[datatap] Scalar/Array Tap 

! 140:[datatap] Scalar/Array Tap 

! 150:[datatap] Scalar/Array Tap 

! 160:[datatap] Scalar/Array Tap 

! 170:[datatap] Scalar/Array Tap 

! 180:[datatap] Scalar/Array Tap 

! 190:[datatap] Scalar/Array Tap 

! 200:[datatap] Scalar/Array Tap 

! 210:[datatap] Scalar/Array Tap 

! 220:[datatap] Scalar/Array Tap 

! 230:[datatap] Scalar/Array Tap 

! 240:[datatap] Scalar/Array Tap 

! 280:[datatap] Scalar/Array Tap 

! 290:[datatap] Scalar/Array Tap 

! 300:[datatap] Scalar/Array Tap 

! 310:[datatap] Scalar/Array Tap 

! 320:[datatap] Scalar/Array Tap 

! 330:[datatap] Scalar/Array Tap 

! 340:[datatap] Scalar/Array Tap 

! 350:[datatap] Scalar/Array Tap 

! 360:[datatap] Scalar/Array Tap 

! 370:[datatap] Scalar/Array Tap 

! 380:[datatap] Scalar/Array Tap 

! 390:[datatap] Scalar/Array Tap 

! 400:[datatap] Scalar/Array Tap 

! 410:[datatap] Scalar/Array Tap 

! 420:[datatap] Scalar/Array Tap 

! 430:[datatap] Scalar/Array Tap 

! 440:[datatap] Scalar/Array Tap 

! 450:[datatap] Scalar/Array Tap 

! 460:[datatap] Scalar/Array Tap 

! 470:[datatap] Scalar/Array Tap 

! 480:[datatap] Scalar/Array Tap 

! 490:[datatap] Scalar/Array Tap 

! 500:[pgb] Output Channel 'U5'

! 510:[datatap] Scalar/Array Tap 

! 520:[datatap] Scalar/Array Tap 

! 530:[pgb] Output Channel 'U4'

! 540:[pgb] Output Channel 'U3'

! 550:[pgb] Output Channel 'U2'

! 560:[pgb] Output Channel 'U1'

! 570:[pgb] Output Channel 'U0'

! 580:[pgb] Output Channel 'I5'

! 590:[pgb] Output Channel 'I4'

! 600:[pgb] Output Channel 'I3'

! 610:[pgb] Output Channel 'I2'

! 620:[pgb] Output Channel 'I1'

! 630:[pgb] Output Channel 'I0'

      RETURN
      END

